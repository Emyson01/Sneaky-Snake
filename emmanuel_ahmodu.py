# -*- coding: utf-8 -*-
"""Emmanuel_Ahmodu.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12r4hch_sB-iHX_3TWQEiD5MlLS2HEtMz
"""



"""# Snake

Complete the Snake project based on **#TODO**'s.

https://docs.python.org/3/library/turtle.html#module-turtle
"""

#TODO - import the packages: turtle, time and random
import turtle 
import time
import random

# global variable

window = None
snake = []
head = None

direction = 'down'
delay_time = 0.1

food = None
food_color = ''

TURTLE_SIZE = 20
WIDTH = 600
HEIGHT = 600

X_RANGE = (WIDTH - TURTLE_SIZE) / 2
Y_RANGE = (HEIGHT - TURTLE_SIZE) / 

pen = None
score = 0
high_score = 0

#TODO - define shapes dictionary
shapes = {
    0: 'circle',
    1: 'square',
    2: 'triangle'
}

#TODO - define colors dictionary

colors = {
    0: 'rebecca purple',
    1: 'dark magenta',
    2: 'crimson',
    3: 'red',
    4: 'blue',
    5: 'orange',
    6: 'peru',
    7: 'sandybrown'
}

food_color = ''
# https://trinket.io/docs/colors

# function to set up the main screen

def set_screen():
    """Sets the main screen."""
    
    global window
    
    #TODO - create the window (Screen) and give it; title, background, width-height. And set the tracer.
    window = turtle.Screen()
    window.title('Sneaky Snake')
    window.bgcolor('mint cream')
    window.setup(width=WIDTH, height=HEIGHT)
    window.tracer(0) # this indicate falsewindow = turtle.Screen()

# function to listen screen events

def listen_events():
    window.listen()
    
    #TODO - listen Up, Down, Left and Right key press events
    window.listen()
    window.onkeypress(set_up_direction, 'Up')
    window.onkeypress(set_down_direction, 'Down')
    window.onkeypress(set_right_direction, 'Right')
    window.onkeypress(set_left_direction, 'Left')

# keyboard functions

#TODO - complete the functions

def set_up_direction():
    #TODO - set the global direction to up
    global direction
    if direction != 'down':
        direction = 'up'
    
def set_down_direction():
    #TODO - set the global direction to down
    global direction
    if direction != 'up':
        direction = 'down'
    
    
def set_left_direction():
    #TODO - set the global direction to left
    global direction
    if direction != 'right':
        direction = 'left'
        
def set_right_direction():
    #TODO - set the global direction to right
    global direction
    if direction != 'left':
        direction = 'right'

# create the head

def create_head(is_initial=True):
    """Creates the snake head."""
    
    global head, snake
    
    # create the head
    
    #TODO - create the head turtle, give it a shape and a color. 
    #TODO - set the position for the head
    #TODO - append the head into snake list
    global head, snake
    
    #  To create the head
    head = turtle.Turtle()
    head.shape(shapes[1])  # 20 x 20
    head.speed(0)
    head.color(colors[1])
    head.penup()
    
    
    if is_initial:
        head.goto(0, 200) # set the position for the head
    
    snake.append(head) # append the head to the list

# create the score

def create_score():
    
    global pen
    
    # create the pen turtle
    #TODO - create the pen turtle and place it on screen

    # initialize the score
    #TODO - call the update_score function to initialize the pen
    global pen
    
    # create the pen turtle
    pen = turtle.Turtle()
    pen.penup()
    pen.hideturtle()    
    pen.goto(0, Y_RANGE - 2 * TURTLE_SIZE)
    pen.color('crimson')
    
    
    update_score(0) # initialize the score to zero

# update the score

def update_score(score_increment, is_reset=False):
    
    #TODO - update the global score and high_score variables, based on is_reset
    
    #TODO - check if the score is greater than the high_score
    
    #TODO - clear the pen
    global score, high_score
    
    if is_reset:
        score = 0
    else:
        score += score_increment
        
    if score > high_score:
        high_score = score
        
    pen.clear()
    
    pen.write("Score: {0}  |  High Score: {1}".format(score, high_score),
              align='center',
              font=('Arial', 16, 'normal'))

# function to update screen

def update_screen():
    
    while window._RUNNING:

        # side collisions
        #TODO - call check_border_collisions function
        check_border_collisions()
        
        # body collisions
        #TODO - call check_body_collisions function
        check_body_collisions()
            
        # move the head
        #TODO - call move function
        move()
            
        # delay
        #TODO - call delay function with global delay_time
        delay(delay_time)
        
        # create the food
        #TODO - call add_food function
        add_food()
        
        # eat the food
        #TODO - call eat_food function
        eat_food()
        
        # get rid of upate error
        window.update()

# function for border collisions

def check_border_collisions():
    
    # if the head position (x, y) is out the ranges (X_RANGE, Y_RANGE) -> we collide
    
    #TODO - get x and y coordinates of the head turtle
    x = head.xcor()
    y = head.ycor()
    
    if x <= -X_RANGE or x >= X_RANGE or y <= -Y_RANGE or y >= Y_RANGE: #TODO decide the collision 
        
        # set direction
        #TODO - set the global direction variable to 'stop'
        global direction
        direction = 'stop'
    
        # reset screen after 1 second
        #TODO - call delay function with 1 seconds
        #TODO - call reset function
        delay(1)
        reset()

# body collisions

def check_body_collisions():
    
    # if the distance betwwen the head and any of the segments is less than the TURTLE_SIZE
    # then this means we collide

    for i, t in enumerate(snake): #TODO - get all turtles and indices for the snake...:
        
        
        if i > 0: #TODO - exclude head index
            
            if head.distance(t) < TURTLE_SIZE - 1: #TODO - get the distance between the head and the current turtle in the loop... < TURTLE_SIZE - 1
                
                # set direction
                #TODO - set the global direction variable to 'stop'
                global direction
                direction = 'stop'

                # reset screen after 1 second
                #TODO - call delay function with 1 seconds
                #TODO - call reset function
                delay(1)
                reset()

# reset screen fn

def reset():
    
    # hide the segments of snake
    for t in snake:
        t.goto(40000, 4000)
    
    # clear the snake
    snake.clear()
    
    # create a new head
    #TODO - call create_head function with is_initial parameter being False
    create_head(is_initial=False)

    # reset the score
    #TODO - call update_score function with score_increment as 0 and is_reset as True
    update_score(0, is_reset=True)

# move function

def move():
    if window._RUNNING:
        
        # move only if the direction is not stop
        if direction != 'stop':
            # move the segments
            #TODO - call move_segments function
            move_segments()

            # move the head
            #TODO - call move_head function
            move_head()

# fn to move the head

def move_head():
    
    # get current coordinate
    #TODO - get x and y coordinates of the head turtle
    x = head.xcor()
    y = head.ycor()

    if direction == 'up':
        head.sety(y + TURTLE_SIZE)
    elif direction == 'down':
        #TODO - set the y coordinate of the head appriopliately -> remember the turtle moves TURTLE_SIZE pixels
        head.sety(y - TURTLE_SIZE)
    elif direction == 'left':
        #TODO - set the x coordinate of the head appriopliately -> remember the turtle moves TURTLE_SIZE pixels
        head.setx(x - TURTLE_SIZE)
    elif direction == 'right':
        #TODO - set the x coordinate of the head appriopliately -> remember the turtle moves TURTLE_SIZE pixels
        head.setx(x + TURTLE_SIZE)

# fn to move segments

def move_segments():
    
    # move each segment in reverse order -> from last segment
    # move each segment into the position of the previous one
    # ignore the head
    # start from the last one -> len(snake)-1
    # up to head -> 0
    # backwards -> -1
    
    for i in range(len(snake)-1, 0, -1):
        #TODO - get the x and y coordinate of the previous segment
        #TODO - place the current turtle in the loop at x and y
        for i in range(len(snake)-1, 0, -1):
            x = snake[i-1].xcor()
            y = snake[i-1].ycor()
            snake[i].goto(x, y)

# delay function

def delay(duration):
    time.sleep(duration)

# create food

def add_food():
    
    if window._RUNNING:
        
        global food
        
        # create a turtle -> single -> Singleton Pattern
        if food == None:
            food = turtle.Turtle()
            food.shape(get_shape())
            food.shapesize(0.5, 0.5)
            food.speed(0)
            food.penup()
            
            #TODO - create the food the turtle and give it a random shape
            
            # color
            #TODO - give food turtle a random color
            food.color(get_color())
            
            # move the food
            #TODO - call move_food function with the food turtle
            move_food(food)

# function to move the food

def move_food(food):
    
    # x coordinate
    x = random.randint(-X_RANGE, X_RANGE) #TODO - get a random integer between -X_RANGE and X_RANGE
    
    # y coordinate
    y = random.randint(-Y_RANGE, Y_RANGE - 2 * TURTLE_SIZE) #TODO - get a random integer between -Y_RANGE and (Y_RANGE - 2 * TURTLE_SIZE)
    
    # replace the food
    food.goto(x, y)

# function to eat the food

def eat_food():
    
    # check the distance between the head and the food
    if head.distance(food) < TURTLE_SIZE - 1:
        
        # move the fodd
        #TODO - call the move_food function with the food
        move_food(food)
        # change the food shape
        #TODO - change the food shape to a random one
        food.shape(get_shape())
        
        # create a segment for the snake
        #TODO - call create_segment function
        create_segment()
        
        # change the fodd color
        #TODO - give food turtle a random color
        food.color(get_color())
        
        # update score
        #TODO - call update_score function with 10 as increment
        update_score(10)

# function to create segment

def create_segment():
    """Creates a new segment for snake."""
    
    global snake
    
    # create a segment
    #TODO - create the segment turtle with appropiate shape
    segment = turtle.Turtle()
    segment.shape(shapes[1])
    segment.speed(0)
    
    #TODO - set the color of the segment turtle to global food_color
    segment.color(food_color)
    segment.penup()
    
    # position the segment
    x, y = get_last_segment_position() #TODO - call get_last_segment_position function
    segment.goto(x, y)
    
    # add this segment into snake list
    #TODO - append the segment to global snake list
    snake.append(segment)

# last segment position

def get_last_segment_position():
    
    # last element -> snake[-1]
    #TODO - get the x and y coordinates of the last segment in the snake
    x = snake[-1].xcor()
    y = snake[-1].ycor()
    
    # direction
    # if direction is up -> same x, y is TURTLE_SIZE less
    if direction == 'up':
        y = y - TURTLE_SIZE
    
    # if direction is up -> same x, y is TURTLE_SIZE more
    elif direction == 'down':
        y = y + TURTLE_SIZE #TODO - assign the new y value
                
    # if direction is right -> same y, x is TURTLE_SIZE less
    elif direction == 'right':
        x =  x - TURTLE_SIZE #TODO - assign the new x value
        
    # if direction is left -> same y, x is TURTLE_SIZE more
    elif direction == 'left':
        x =  x + TURTLE_SIZE #TODO - assign the new x value
    
    return (x, y) #TODO - return a tuple of x and y

# get a random shape

def get_shape():
    
    index = random.randint(0, len(shapes)-1)
    
    return shapes[index]

# get a random color

def get_color():
    
    global food_color
    
    index = random.randint(0, len(colors)-1) #TODO - get a random integer between 0 and the length of colors -1
    color = colors[index]
    
    food_color = color
    
    return color